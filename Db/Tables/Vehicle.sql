CREATE EXTENSION IF NOT EXISTS citext;

CREATE TABLE IF NOT EXISTS vehicle
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    summary VARCHAR(100) NOT NULL,
    description VARCHAR(5000) NULL,
    
    model VARCHAR(100) NULL,
    status SMALLINT NULL,

    gearbox_type SMALLINT NULL REFERENCES gearbox_type(id),
    fuel_type SMALLINT NULL REFERENCES fuel_type(id),
    body_type SMALLINT NULL REFERENCES body_type(id),
    drive_type SMALLINT NULL REFERENCES drive_type(id),
    colour SMALLINT NULL REFERENCES colour(id),
    service_history_type SMALLINT NULL REFERENCES service_history_type(id),
    category_type SMALLINT NULL REFERENCES category_type(id),
    emission_standard_type SMALLINT NULL REFERENCES emission_standard_type(id),


    mileage INTEGER NULL,
    price NUMERIC(10,2) NULL,
    no_of_previous_owners SMALLINT NULL,
    no_of_doors SMALLINT NULL,
    no_of_seats SMALLINT NULL,
    no_of_keys SMALLINT NULL,
    is_brand_new BOOLEAN NOT NULL DEFAULT FALSE,

    first_registration_year SMALLINT NULL, 
    registration CITEXT NULL,
    
    is_ulez_compliant BOOLEAN NULL,
    engine_capacity_liters NUMERIC(3,1) NULL, 
    battery_range_miles INTEGER NULL, 

    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    CONSTRAINT ck_vehicle_price CHECK (price IS NULL OR price >= 0),
    CONSTRAINT ck_vehicle_mileage CHECK (mileage IS NULL OR mileage >= 0),
    CONSTRAINT ck_vehicle_doors CHECK (no_of_doors IS NULL OR no_of_doors BETWEEN 2 AND 9),
    CONSTRAINT ck_vehicle_seats CHECK (no_of_seats IS NULL OR no_of_seats BETWEEN 2 AND 9),
    CONSTRAINT ck_vehicle_year CHECK (first_registration_year IS NULL OR first_registration_year BETWEEN 1950 AND EXTRACT(YEAR FROM NOW())::INT),
    CONSTRAINT ck_vehicle_battery CHECK (battery_range_miles IS NULL OR battery_range_miles >= 0)
);

CREATE INDEX IF NOT EXISTS ux_vehicle_registration
    ON vehicle (registration) WHERE registration IS NOT NULL;

CREATE INDEX IF NOT EXISTS ix_vehicle_price ON vehicle(price);
CREATE INDEX IF NOT EXISTS ix_vehicle_mileage ON vehicle(mileage);
CREATE INDEX IF NOT EXISTS ix_vehicle_year ON vehicle(first_registration_year);
CREATE INDEX IF NOT EXISTS ix_vehicle_facets ON vehicle(fuel_type, gearbox_type, body_type, drive_type);

CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS TRIGGER LANGUAGE plpsql AS $$
BEGIN
    NEW.updated_at := NOW();
    RETURN NEW;
END $$;

DROP TRIGGER IF EXISTS trg_vehicle_updated ON vehicle;
CREATE TRIGGER trg_vehicle_updated
BEFORE UPDATE ON vehicle
FOR EACH ROW
EXECUTE FUNCTION set_updated_at();